import axios from "axios";
import { MongoClient } from "mongodb";
import AWS from "aws-sdk";
import mime from "mime-types";
import { readFile } from "fs/promises";
import dotenv from "dotenv";
import express from "express";

dotenv.config();

const app = express();
app.get("/", (req, res) => {
  res.send("Server is running...");
});
app.listen(6001, () => {
  console.log("Server is listening on port 6000");
});

const S3 = new AWS.S3({
  accessKeyId: process.env.AWS_ACCESS_KEY_ID,
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  region: "eu-north-1",
});
const BUCKET_NAME = "mainstocklist";

const mongoClient = new MongoClient("your_mongo_url_here");

let symbols = {};

const sleep = (ms) => new Promise((r) => setTimeout(r, ms));

async function loadFavicons() {
  try {
    const data = await readFile("favicon.json", "utf-8");
    symbols = JSON.parse(data);
    console.log("üß† Loaded favicons.");
  } catch (err) {
    console.error("‚ùå Failed to load favicons:", err.message);
  }
}

// Main function for processing a single company
async function processCompany(i) {
  const company = i.Name;
  const industry = i.Industry || "";
  const sector = i.Sector || "";
  const title = i.title || "";
  let url = i.source_url || "";
  const favicon = symbols[company] || "";
  const ogurl = url;

  try {
    console.log(`\nüü° Starting: ${company}`);

    const lowerUrl = url.toLowerCase();
    const disallowedExtensions = [".mp3", ".mp4", ".zip"];
    if (disallowedExtensions.some((ext) => lowerUrl.endsWith(ext))) {
      console.log(`üö´ Skipping unsupported file type: ${url}`);
      return;
    }

    if (!/\.(pdf|docx?|xlsx?|pptx?)$/i.test(url)) {
      try {
        console.log(`‚¨áÔ∏è  Downloading content from: ${url}`);
        const response = await axios.get(url, {
          responseType: "arraybuffer",
          timeout: 10000,
          headers: {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0...)",
            "sec-ch-ua": '"Chromium";v="131", "Not_A Brand";v="24"',
          },
        });

        const contentType =
          response.headers["content-type"] || mime.lookup(url) || "application/octet-stream";

        const safeTitle = title.replace(/[^\w\d_\-\.]/g, "_");
        const timestampedTitle = `${Date.now()}_${safeTitle}`;

        const params = {
          Bucket: BUCKET_NAME,
          Key: `reports/${timestampedTitle}`,
          Body: response.data,
          ContentType: contentType,
        };

        console.log(`üì¶ Uploading to S3 as ${timestampedTitle} (${contentType})`);
        await S3.putObject(params).promise();

        url = `https://${BUCKET_NAME}.s3.${S3.config.region}.amazonaws.com/reports/${timestampedTitle}`;
        console.log(`‚úÖ Uploaded to S3: ${url}`);
      } catch (err) {
        console.error(`‚ùå Download/S3 Upload failed for ${company}: ${err.message}`);
        return;
      }
    }

    const reqBody = {
      company,
      industry,
      sector,
      title,
      link: url,
      url,
      favicon,
      flag: "test1505",
    };

    try {
      console.log(`üì§ Sending data to ingestion API...`);
      const res = await axios.post(
        "https://eprid4tv0b.execute-api.eu-west-1.amazonaws.com/final/rag-ingestor",
        reqBody
      );

      console.log(`üéØ API response: ${res.status} ${res.statusText}`);

      try {
        const resultCollection = mongoClient.db("main_stock_list").collection("api_responses");
        await resultCollection.insertOne({
          company,
          response: res.data,
          timestamp: new Date(),
          url: ogurl,
        });
        console.log(`üìù Saved ${company} response to MongoDB.`);
      } catch (err) {
        console.error(`‚ùå Failed to save response to MongoDB for ${company}: ${err.message}`);
      }
    } catch (err) {
      console.error(`‚ùå Ingestion API failed for ${company}: ${err.message}`);
    }

    console.log("-".repeat(50));
  } catch (err) {
    console.error(`‚ùå Error processing ${company}: ${err.message}`);
    console.log("-".repeat(50));
  }
}

// Main execution block
(async () => {
  try {
    await mongoClient.connect();
    console.log("üü¢ Connected to MongoDB");

    await loadFavicons();

    const mainCollection = mongoClient.db("main_stock_list").collection("main_stock_list");
    const responseCollection = mongoClient.db("main_stock_list").collection("api_responses");

    let companies;
    try {
      companies = await readFile("./main_stocks.json", "utf-8");
      companies = JSON.parse(companies);
      console.log(`üìä Loaded ${companies.length} companies`);
    } catch (err) {
      console.error("‚ùå Failed to load main_stocks.json:", err.message);
      return;
    }

    for (const company of companies.slice(5000)) {
      try {
        const matches = await mainCollection.find({ Name: company.Name }).toArray();

        for (const match of matches) {
          if (!match.source_url) {
            console.log(`‚ö†Ô∏è  No source URL for ${match.Name}`);
            continue;
          }

          const existing = await responseCollection.findOne({ url: match.source_url });
          if (existing) {
            console.log(`üîÅ Already processed: ${match.Name}`);
            continue;
          }

          await processCompany(match);
          await sleep(300);
        }
      } catch (err) {
        console.error(`‚ùå Error processing company batch: ${err.message}`);
      }
    }

    console.log("\n‚úÖ All companies processed.");
  } catch (err) {
    console.error("üî• Main Error:", err.message);
  } finally {
    try {
      await mongoClient.close();
      console.log("üîí MongoDB connection closed");
    } catch (err) {
      console.error("‚ùå Error closing MongoDB connection:", err.message);
    }
  }
})();
